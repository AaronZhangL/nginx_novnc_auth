##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

upstream auth_server {
    #server 127.0.0.1:5000;
    server kurtz.iplantc.org:5000;
}

# Default server configuration
#
# server {
#     listen 80;
# #    listen [::]:80 default_server;
#
#     return 301 https://kurtz.iplantc.org$request_uri;
# }

server {


    # SSL configuration
    #
    listen 443;
    #listen [::]:443 ssl default_server;

    server_name kurtz.iplantc.org;
    charset utf-8;

    ssl on;
    ssl_certificate /etc/ssl/certs/iplantc_combined.crt;
    #ssl_certificate /etc/ssl/certs/iplantc.org.crt;
    ssl_certificate_key /etc/ssl/private/iplantc.key;

    ssl_ciphers 'AES128+EECDH:AES128+EDH';

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache shared:SSL:10m;

    # Cache OSCP protects against DoS attacks
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.4.4 8.8.8.8 valid=300s;
    resolver_timeout 10s;

    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    add_header Strict-Transport-Security max-age=63072000;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    # Note: You should disable gzip for SSL traffic.
    # See: https://bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: https://bugs.debian.org/765782
    #
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    #
    # include snippets/snakeoil.conf;

    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.nginx-debian.html;

    include /etc/nginx/uwsgi_params;

    location = /auth {
        proxy_pass https://auth_server/auth/;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
	# Comment out when running in foreground
	#uwsgi_pass unix:///tmp/novnc_auth.sock;
    }

    location /websockify {
        auth_request /auth;
        # use response header, X-Target-VM-IP, to set variable
        auth_request_set $vm_ip $upstream_http_x_target_vm_ip;
        proxy_http_version 1.1;
        proxy_pass http://$vm_ip:5904;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location /vncws/ {
        # Required on web proxy:
        # cd /usr/share/novnc/
        # ln -s vnc_auto.html index.html
        # Unless @lenards redirects to vnc_auto.html
        auth_request /auth;
        # use response header, X-Target-VM-IP, to set variable
        auth_request_set $vm_ip $upstream_http_x_target_vm_ip;
        auth_request_set $sig_cookie $upstream_http_x_set_sig_cookie;
        add_header Set-Cookie $sig_cookie;
    }

    location /vncws/vnc_auto.html {
        auth_request /auth;
        # use response header, X-Target-VM-IP, to set variable
        auth_request_set $vm_ip $upstream_http_x_target_vm_ip;
        auth_request_set $sig_cookie $upstream_http_x_set_sig_cookie;
        add_header Set-Cookie $sig_cookie;
        try_files $uri $uri/ =404;
    }

    location /vncws/vnc.html {
        # TODO: Share the location of vnc_auto.html instead of copying.
        auth_request /auth;
        # use response header, X-Target-VM-IP, to set variable
        auth_request_set $vm_ip $upstream_http_x_target_vm_ip;
        auth_request_set $sig_cookie $upstream_http_x_set_sig_cookie;
        add_header Set-Cookie $sig_cookie;
        try_files $uri $uri/ =404;
    }

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
    }

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #   include snippets/fastcgi-php.conf;
    #
    #   # With php5-cgi alone:
    #   fastcgi_pass 127.0.0.1:9000;
    #   # With php5-fpm:
    #   fastcgi_pass unix:/var/run/php5-fpm.sock;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #   deny all;
    #}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#   listen 80;
#   listen [::]:80;
#
#   server_name example.com;
#
#   root /var/www/example.com;
#   index index.html;
#
#   location / {
#       try_files $uri $uri/ =404;
#   }
#}
